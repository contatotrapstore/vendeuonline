// Schema Prisma para PostgreSQL (Supabase) - Produção
// Configurado para usar conexão direta com Supabase

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de usuário base
model User {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  password         String
  phone            String
  type             UserType
  city             String
  state            String
  avatar           String?
  isVerified       Boolean  @default(false)
  isActive         Boolean  @default(true)
  asaasCustomerId  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  lastLogin        DateTime?

  // Relações
  buyer         Buyer?
  seller        Seller?
  admin         Admin?
  orders        Order[]
  addresses     Address[]
  reviews       Review[]
  subscriptions Subscription[]
  notifications Notification[]
  cart          Cart[]
  payments      Payment[]
  
  @@map("users")
}

enum UserType {
  BUYER
  SELLER
  ADMIN
}

// Modelo específico para compradores
model Buyer {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wishlists     Wishlist[]
  
  @@map("buyers")
}

// Modelo específico para vendedores
model Seller {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId        String?
  plan          Plan?    @relation(fields: [planId], references: [id])
  rating        Float    @default(0.0)
  totalSales    Int      @default(0)
  commission    Float    @default(5.0)
  isVerified    Boolean  @default(false)
  
  // Relações
  store         Store?
  products      Product[]
  orders        Order[]
  subscriptions Subscription[]
  settings      SellerSettings?
  
  @@map("sellers")
}

// Modelo específico para administradores
model Admin {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions String    // JSON string com array de permissões
  lastLogin   DateTime?
  
  @@map("admins")
}

// Modelo de loja
model Store {
  id              String   @id @default(cuid())
  sellerId        String   @unique
  seller          Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  name            String
  slug            String   @unique
  description     String
  email           String
  phone           String
  city            String
  state           String
  logo            String?
  banner          String?
  isVerified      Boolean  @default(false)
  isActive        Boolean  @default(true)
  theme           String   @default("{}") // JSON
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  products        Product[]
  orders          Order[]
  reviews         Review[]
  
  @@map("stores")
}

// Modelo de categoria
model Category {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String?
  image           String?
  parentId        String?
  parent          Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryHierarchy")
  isActive        Boolean   @default(true)
  order           Int       @default(0)
  productCount    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relações
  products        Product[]
  
  @@map("categories")
}

// Modelo de produto
model Product {
  id              String   @id @default(cuid())
  sellerId        String
  seller          Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  storeId         String
  store           Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  
  name            String
  description     String
  price           Float
  comparePrice    Float?
  stock           Int      @default(0)
  minStock        Int      @default(5)
  sku             String?
  weight          Float?
  tags            String   @default("[]") // JSON array como string
  seoTitle        String?
  seoDescription  String?
  isFeatured      Boolean  @default(false)
  isActive        Boolean  @default(true)
  approvalStatus  ApprovalStatus @default(PENDING) @map("approval_status")
  rejectionReason String? @map("rejection_reason")
  approvedAt      DateTime? @map("approved_at")
  approvedBy      String? @map("approved_by")
  rating          Float    @default(0.0)
  reviewCount     Int      @default(0)
  salesCount      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  images          ProductImage[]
  specifications  ProductSpecification[]
  orderItems      OrderItem[]
  wishlists       Wishlist[]
  reviews         Review[]
  cart            Cart[]
  
  @@map("Product")
}

model ProductImage {
  id          String  @id @default(cuid())
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  alt         String
  order       Int     @default(0)
  isMain      Boolean @default(false)
  
  @@map("product_images")
}

model ProductSpecification {
  id          String  @id @default(cuid())
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  name        String
  value       String
  
  @@map("product_specifications")
}

// Endereços
model Address {
  id           String  @id @default(cuid())
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String  // Ex: "Casa", "Trabalho"
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  isDefault    Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relações
  shippingOrders  Order[] @relation("ShippingAddress")
  billingOrders   Order[] @relation("BillingAddress")
  
  @@map("addresses")
}

// Pedidos
model Order {
  id                String      @id @default(cuid())
  buyerId           String
  buyer             User        @relation(fields: [buyerId], references: [id])
  sellerId          String
  seller            Seller      @relation(fields: [sellerId], references: [id])
  storeId           String
  store             Store       @relation(fields: [storeId], references: [id])
  shippingAddressId String
  shippingAddress   Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String
  billingAddress    Address     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  
  status            OrderStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethod     PaymentMethod
  paymentId         String?
  
  subtotal          Float
  shippingCost      Float       @default(0.0)
  tax               Float       @default(0.0)
  discount          Float       @default(0.0)
  total             Float
  
  notes             String?
  trackingCode      String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  cancelledAt       DateTime?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relações
  items             OrderItem[]
  
  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BOLETO
  WHATSAPP
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  
  name        String  // Nome do produto no momento da compra
  price       Float   // Preço no momento da compra
  quantity    Int
  total       Float
  
  @@map("order_items")
}

// Carrinho de compras
model Cart {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, productId])
  @@map("carts")
}

// Wishlist
model Wishlist {
  id          String   @id @default(cuid())
  buyerId     String
  buyer       Buyer    @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([buyerId, productId])
  @@map("wishlists")
}

// Reviews
model Review {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  storeId     String?
  store       Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  rating      Int      // 1-5
  title       String
  comment     String
  images      String   @default("[]") // JSON array como string
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("reviews")
}

// Planos de assinatura
model Plan {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String
  price           Float
  billingPeriod   String   // monthly, yearly
  maxAds          Int      @default(-1) // -1 = ilimitado
  maxPhotos       Int      @default(-1)
  maxProducts     Int      @default(-1) // -1 = ilimitado
  maxImages       Int      @default(-1)
  maxCategories   Int      @default(-1)
  prioritySupport Boolean  @default(false)
  support         String
  features        String   @default("[]") // JSON array como string
  isActive        Boolean  @default(true)
  order           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relações
  subscriptions   Subscription[]
  sellers         Seller[]
  payments        Payment[]
  
  @@map("plans")
}

// Assinaturas
model Subscription {
  id              String             @id @default(cuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  sellerId        String?
  seller          Seller?            @relation(fields: [sellerId], references: [id])
  planId          String
  plan            Plan               @relation(fields: [planId], references: [id])
  
  status          SubscriptionStatus @default(PENDING)
  paymentId       String?
  startDate       DateTime?
  endDate         DateTime?
  lastPayment     DateTime?
  nextBilling     DateTime?
  
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  @@map("subscriptions")
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  CANCELLED
  EXPIRED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

// Modelo para banners publicitários
model Banner {
  id            String           @id @default(cuid())
  title         String
  description   String?
  imageUrl      String
  targetUrl     String?
  position      BannerPosition
  isActive      Boolean          @default(true)
  startDate     DateTime?
  endDate       DateTime?
  clicks        Int              @default(0)
  impressions   Int              @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@map("banners")
}

enum BannerPosition {
  HEADER
  SIDEBAR
  FOOTER
  CATEGORY
  HOME_HERO
  HOME_FEATURED
}

// Modelo para auditoria de ações administrativas
model AuditLog {
  id            String   @id @default(cuid())
  adminId       String   // ID do admin que executou a ação
  adminName     String   // Nome do admin para referência rápida
  action        String   // Tipo da ação (CREATE, UPDATE, DELETE, etc.)
  resource      String   // Recurso afetado (USER, PRODUCT, STORE, etc.)
  resourceId    String?  // ID do recurso específico
  details       String   // JSON com detalhes da ação
  ipAddress     String?  // IP do admin
  userAgent     String?  // User Agent do browser
  success       Boolean  @default(true)
  errorMessage  String?  // Mensagem de erro se success = false
  createdAt     DateTime @default(now())
  
  @@map("audit_logs")
}

// Modelo para configurações do sistema (pixels, analytics, etc.)
model SystemConfig {
  id              String   @id @default(cuid())
  key             String   @unique
  value           String
  description     String?
  category        String   @default("general") // tracking, email, payment, etc.
  isActive        Boolean  @default(true)
  updatedBy       String?  // ID do admin que atualizou
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
  
  @@map("system_configs")
}

// Modelo de notificações
model Notification {
  id          String            @id @default(cuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  message     String
  type        NotificationType  @default(INFO)
  isRead      Boolean          @default(false)
  readAt      DateTime?
  data        String?  // JSON string com dados extras se necessário
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  @@map("notifications")
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  PROMOTION
  SECURITY
  ORDER
  PAYMENT
  SYSTEM
}

// Modelo de pagamentos para integração com ASAAS
model Payment {
  id                  String        @id @default(cuid())
  userId              String
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId              String?
  plan                Plan?         @relation(fields: [planId], references: [id])

  asaasPaymentId      String        @unique  // ID do pagamento no ASAAS
  amount              Float
  status              PaymentStatus @default(PENDING)
  paymentMethod       PaymentMethod
  pixQrCode           String?       // QR Code para PIX
  pixCopyPaste        String?       // Código PIX copia e cola
  boletoUrl           String?       // URL do boleto
  invoiceUrl          String?       // URL da fatura
  description         String?

  // Webhook data
  webhookReceived     Boolean       @default(false)
  webhookData         String?       // JSON com dados do webhook

  // Timestamps
  paidAt              DateTime?
  expireAt            DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("payments")
}

// Configurações específicas do vendedor
model SellerSettings {
  id                String   @id @default(cuid())
  sellerId          String   @unique
  seller            Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  // Configurações de pagamento
  acceptsCreditCard Boolean  @default(true)
  acceptsDebitCard  Boolean  @default(true)
  acceptsPix        Boolean  @default(true)
  acceptsBoleto     Boolean  @default(false)
  acceptsWhatsapp   Boolean  @default(true)

  // Configurações de entrega
  freeShippingMin   Float?   // Valor mínimo para frete grátis
  shippingFee       Float    @default(10.0)
  deliveryDays      Int      @default(7)
  pickupAvailable   Boolean  @default(false)

  // Configurações da loja
  workingDays       String   @default("[]")  // JSON array: ["monday", "tuesday", ...]
  workingHours      String   @default("{\"start\": \"08:00\", \"end\": \"18:00\"}")  // JSON
  autoApproveOrders Boolean  @default(false)

  // Políticas
  returnPolicy      String?
  privacyPolicy     String?
  terms             String?

  // Notificações
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("seller_settings")
}

